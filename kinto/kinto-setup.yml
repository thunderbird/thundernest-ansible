- name: Build EC2 instances.
  hosts: localhost
  connection: local
  gather_facts: False
  become: False
  vars:
    state: present
    prodenv: stage

  tasks:
    - name: Show defined production environment
      debug:
        msg: "prodenv={{ prodenv }}"
      when: prodenv is defined

    - name: Verify production environment is stage or prod
      fail:
        msg: "prodenv is not defined, or is set to something other than stage or prod"
      when: (prodenv is not defined) or ((prodenv != "stage") and (prodenv != "prod"))

    - name: Create EC2 instances.
      ec2_instance:
        key_name: tb-amo-ops-key
        region: us-west-2
        security_groups:
          - add-ssh
          - kinto-web-backend
        instance_type: c5.xlarge
        image_id: ami-0157b1e4eefd91fd7
        exact_count: 2
        filters:
            "tag:Name": "kinto-web-{{ prodenv }}"
        name: "kinto-web-{{ prodenv }}"
        wait: yes
        vpc_subnet_id: subnet-35f0477d
        network:
          assign_public_ip: yes
        volumes:
          - device_name: /dev/sda1
            volume_type: gp2
            volume_size: 200
            delete_on_termination: true
      register: ec2

    # If we created any new instances, add them to the hosts group so later
    # tasks against the hosts group will find it. Existing hosts will
    # already be in the group from inventory.
    - name: Add new instance hostnames to host group
      add_host: hostname={{ item.public_dns_name }} groups=aws_ec2_kinto_web_{{ prodenv }}
      loop: "{{ ec2.instances }}"
      when: ec2.instances is defined

    - name: Show ec2 data
      debug:
        msg: "{{ ec2 }}"

    - name: Pause for public IP assignment.
      pause:
        seconds: 5

    - name: Wait for ssh to become active.
      wait_for: host={{ item.public_ip }} port=22 delay=10 timeout=600 state=started
      with_items: "{{ ec2.tagged_instances }}"
      when: item.public_ip is defined

- name: configure kinto on the webservers
  import_playbook: plays/kinto.yml

- name: configure kinto backend webservers
  import_playbook: plays/kinto-apache.yml

# this has to happen after the webheads are set up or there won't be anything
# to add to the ELB.
- name: Build and configure ELB Load Balancer
  hosts: localhost
  connection: local
  gather_facts: False
  become: False
  vars:
    state: present
    prodenv: foo

  tasks:
    - name: Show defined production environment
      debug:
        msg: "prodenv={{ prodenv }}"
      when: prodenv is defined

    - name: Verify production environment is stage or prod
      fail:
        msg: "prodenv is not defined, or is set to something other than stage or prod"
      when: (prodenv is not defined) or ((prodenv != "stage") and (prodenv != "prod"))

    - name: Make sure target group exists
      elb_target_group:
        name: "kinto-{{ prodenv }}"
        vpc_id: vpc-441e5e22
        protocol: http
        port: 80
        health_check_protocol: http
        health_check_port: 80
        health_check_path: /
        successful_response_codes: "200,302,307"
        health_check_interval: 15
        health_check_timeout: 3
        healthy_threshold_count: 4
        unhealthy_threshold_count: 3
        modify_targets: no
        state: present

    - name: Add hosts to the target group
      elb_target:
        target_group_name: "kinto-{{ prodenv }}"
        target_id: "{{ item.id }}"
        target_port: 80
        state: present
      with_items: "{{ ec2.tagged_instances }}"

    - name: Create an ELB application server
      elb_application_lb:
        # these have to go in s3 if we do them, need to set up an s3 bucket if so
        #access_logs_enabled: yes
        #access_logs_s3_bucket: thebucket
        #access_logs_s3_prefix: filename_prefix_
        name: "kinto-{{ prodenv }}"
        security_groups:
          - amo-outside-web-access-prod-tb
        subnets:
          - subnet-11d28e4a
          - subnet-35f0477d
        listeners:
          - Protocol: HTTP
            Port: 80
            DefaultActions:
             - Type: forward
               TargetGroupName: "kinto-{{ prodenv }}"
          - Protocol: HTTPS
            Port: 443
            SslPolicy: ELBSecurityPolicy-2016-08
            Certificates:
             - CertificateArn: arn:aws:acm:us-west-2:768512802988:certificate/2cff184f-31a3-4e9e-b478-eff82076f06f
            DefaultActions:
             - Type: forward
               TargetGroupName: "kinto-{{ prodenv }}"
        state: present
      register: elb

    - name: display ELB info
      debug:
        msg: "ELB is listening on: {{ elb.dns_name }}"

    # this needs CLOUDFLARE_TOKEN set in your environment
    #- name: point DNS at the ELB
    #  cloudflare_dns:
    #    solo: yes
    #    domain: thunderbird.net
    #    record: thunderbird-settings-stage
    #    type: CNAME
    #    value: "{{ elb.dns_name }}"
